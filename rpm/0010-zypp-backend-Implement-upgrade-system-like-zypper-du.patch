From d23d0248e8be668b23df3479cf43b50186ac0283 Mon Sep 17 00:00:00 2001
From: Pekka Vuorela <pekka.vuorela@jollamobile.com>
Date: Fri, 13 Oct 2017 12:56:37 +0300
Subject: [PATCH 10/38] zypp backend: Implement upgrade-system (like 'zypper
 dup')

Example usage:

    pkcon upgrade-system sailfish default

The distro-id ("sailfish") and the method ("default") are ignored,
but have to be passed for PackageKit to allow an upgrade.

[backends] Implement support for upgrade-system in zypp backend

Squashed:

zypp Backend: With "minimal" upgrade, only download packages

This allows downloading all upgrades so that the upgrade can then
be carried out offline. Some preparations for other methods added.

[backends] zypp: Minimal system upgrade = download-only upgrade
---
 backends/zypp/pk-backend-zypp.cpp | 118 +++++++++++++++++++++++++++++++++++++-
 1 file changed, 115 insertions(+), 3 deletions(-)

diff --git a/backends/zypp/pk-backend-zypp.cpp b/backends/zypp/pk-backend-zypp.cpp
index c1c2c5ad4..43915f47c 100644
--- a/backends/zypp/pk-backend-zypp.cpp
+++ b/backends/zypp/pk-backend-zypp.cpp
@@ -5,6 +5,9 @@
  * Copyright (c) 2007-2008 Stefan Haas <shaas@suse.de>
  * Copyright (c) 2007-2008 Scott Reeves <sreeves@novell.com>
  *
+ * Copyright (c) 2013 Jolla Ltd.
+ * Contact: Thomas Perl <thomas.perl@jollamobile.com>
+ *
  * Licensed under the GNU General Public License Version 2
  *
  * This program is free software; you can redistribute it and/or modify
@@ -100,7 +103,8 @@ using zypp::filesystem::PathInfo;
 typedef enum {
         INSTALL,
         REMOVE,
-        UPDATE
+        UPDATE,
+        UPGRADE,
 } PerformType;
 
 
@@ -1415,7 +1419,7 @@ zypp_backend_pool_item_notify (PkBackendJob  *job,
 static gboolean
 zypp_perform_execution (PkBackendJob *job, ZYpp::Ptr zypp, PerformType type, gboolean force, PkBitfield transaction_flags)
 {
-	MIL << force << " " << pk_filter_bitfield_to_string(transaction_flags) << endl;
+	MIL << force << " " << pk_transaction_flag_bitfield_to_string(transaction_flags) << endl;
 	gboolean ret = FALSE;
 	
 	PkBackend *backend = PK_BACKEND(pk_backend_job_get_backend(job));
@@ -1429,7 +1433,15 @@ zypp_perform_execution (PkBackendJob *job, ZYpp::Ptr zypp, PerformType type, gbo
 		pk_backend_job_set_percentage(job, 0);
 		zypp->resolver ()->setIgnoreAlreadyRecommended (TRUE);
 		pk_backend_job_set_percentage(job, 100);
-		if (!zypp->resolver ()->resolvePool ()) {
+		bool resolveResult = false;
+		if (type == UPGRADE) {
+			// Modeled after dist_upgrade() in Zypper's src/solve-commit.cc
+			zypp->resolver()->setOnlyRequires(false);
+			resolveResult = zypp->resolver()->doUpgrade();
+		} else {
+			resolveResult = zypp->resolver()->resolvePool();
+		}
+		if (!resolveResult) {
 			// Manual intervention required to resolve dependencies
 			// TODO: Figure out what we need to do with PackageKit
 			// to pull off interactive problem solving.
@@ -1473,6 +1485,7 @@ zypp_perform_execution (PkBackendJob *job, ZYpp::Ptr zypp, PerformType type, gbo
 			_dl_progress = 0;
 			break;
 		case UPDATE:
+		case UPGRADE:
 			pk_backend_job_set_status (job, PK_STATUS_ENUM_UPDATE);
 			pk_backend_job_set_percentage(job, 0);
 			_dl_progress = 0;
@@ -1499,6 +1512,9 @@ zypp_perform_execution (PkBackendJob *job, ZYpp::Ptr zypp, PerformType type, gbo
 					if (it->status ().isToBeUninstalledDueToUpgrade ())
 						continue;
 					break;
+				case UPGRADE:
+					// for dist upgrades, we want to see everything
+					break;
 				}
 				
 				if (!zypp_backend_pool_item_notify (job, *it, TRUE))
@@ -3633,6 +3649,102 @@ pk_backend_download_packages (PkBackend *backend, PkBackendJob *job, gchar **pac
 }
 
 /**
+ * struct DistUpgrade: Contains parameters for the upgrade-system command
+ **/
+struct DistUpgrade {
+	DistUpgrade(const gchar *distro_id, PkUpgradeKindEnum upgrade_kind)
+		: distro_id(g_strdup(distro_id))
+		, upgrade_kind(upgrade_kind)
+	{
+	}
+
+	~DistUpgrade()
+	{
+		g_free(distro_id);
+	}
+
+	gchar *distro_id;
+	PkUpgradeKindEnum upgrade_kind;
+};
+
+static void
+backend_upgrade_system_thread (PkBackendJob *job, GVariant *params, gpointer user_data)
+{
+	DistUpgrade *parameters = static_cast<DistUpgrade *>(user_data);
+	PkBitfield transaction_flags = 0;
+	std::string pattern_name = parameters->distro_id;
+
+	/**
+	 * Possible values for upgrade_kind:
+	 *
+	 *  - PK_UPGRADE_KIND_ENUM_MINIMAL
+	 *    Only download upgrades, do not install them
+	 *
+	 *  - PK_UPGRADE_KIND_ENUM_DEFAULT (default if nothing else specified)
+	 *    Download and install upgrades
+	 *
+	 *  - PK_UPGRADE_KIND_ENUM_COMPLETE
+	 *    Download and install upgrades, install named pattern (distroId)
+	 **/
+	switch (parameters->upgrade_kind) {
+		case PK_UPGRADE_KIND_ENUM_MINIMAL:
+			MIL << "Downloading upgrades (no installation)" << std::endl;
+			pk_bitfield_add(transaction_flags,
+					PK_TRANSACTION_FLAG_ENUM_ONLY_DOWNLOAD);
+			break;
+		case PK_UPGRADE_KIND_ENUM_COMPLETE:
+			MIL << "Installing upgrades and named pattern:" << pattern_name << std::endl;
+			break;
+		case PK_UPGRADE_KIND_ENUM_DEFAULT:
+		default:
+			MIL << "Downloading and installing upgrades" << std::endl;
+			break;
+	}
+	delete parameters;
+
+	ZyppJob zjob(job);
+	ZYpp::Ptr zypp = zjob.get_zypp();
+
+	if (zypp == NULL) {
+		pk_backend_job_finished (job);
+		return;
+	}
+
+	try
+	{
+		pk_backend_job_set_status (job, PK_STATUS_ENUM_REFRESH_CACHE);
+		if (!zypp_refresh_cache (job, zypp, FALSE)) {
+			zypp_backend_finished_error (job,
+					PK_ERROR_ENUM_REPO_NOT_AVAILABLE,
+					"Cannot refresh package cache.");
+			return;
+		}
+
+		// Must be called after zypp_refresh_cache to see locally-installed files
+		ResPool pool = zypp_build_pool (zypp, TRUE);
+
+		if (!zypp_perform_execution (job, zypp, UPGRADE, TRUE, transaction_flags)) {
+			MIL << "Upgrade execution failed" << std::endl;
+		}
+	} catch (const Exception &ex) {
+		zypp_backend_finished_error (job,
+				PK_ERROR_ENUM_PACKAGE_DOWNLOAD_FAILED,
+				ex.asUserString().c_str());
+		return;
+	}
+
+	pk_backend_job_finished (job);
+}
+
+void
+pk_backend_upgrade_system (PkBackend *backend, PkBackendJob *job, PkBitfield transaction_flags,
+	const gchar *distro_id, PkUpgradeKindEnum upgrade_kind)
+{
+	pk_backend_job_thread_create (job, backend_upgrade_system_thread,
+			new DistUpgrade(distro_id, upgrade_kind), NULL);
+}
+
+/**
  * pk_backend_start_job:
  */
 void
-- 
2.13.6

