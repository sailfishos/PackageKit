From e48de301b880ff4d83ee3fc35215cd679e249824 Mon Sep 17 00:00:00 2001
From: Thomas Perl <thomas.perl@jolla.com>
Date: Wed, 2 Apr 2014 15:44:12 +0200
Subject: [PATCH 28/40] Handle and log C++ exceptions in all threads

---
 backends/zypp/pk-backend-zypp.cpp | 102 +++++++++++++++++++++++++++++---------
 1 file changed, 79 insertions(+), 23 deletions(-)

diff --git a/backends/zypp/pk-backend-zypp.cpp b/backends/zypp/pk-backend-zypp.cpp
index 649fd37c1..b745e24dc 100644
--- a/backends/zypp/pk-backend-zypp.cpp
+++ b/backends/zypp/pk-backend-zypp.cpp
@@ -210,6 +210,62 @@ zypp_build_package_id_from_resolvable (const sat::Solvable &resolvable)
 	return package_id;
 }
 
+class ZyppBackendThreadWrapperData {
+public:
+	ZyppBackendThreadWrapperData(PkBackendJobThreadFunc func,
+			gpointer user_data, GDestroyNotify destroy_func)
+		: func(func)
+		, user_data(user_data)
+		, destroy_func(destroy_func)
+	{
+	}
+
+	~ZyppBackendThreadWrapperData()
+	{
+	}
+
+	PkBackendJobThreadFunc func;
+	gpointer user_data;
+	GDestroyNotify destroy_func;
+};
+
+static void
+zypp_backend_job_thread_wrapper (PkBackendJob *job, GVariant *params,
+		gpointer user_data)
+{
+	ZyppBackendThreadWrapperData *data = static_cast<ZyppBackendThreadWrapperData *>(user_data);
+
+	try {
+		// Call real thread function
+		data->func(job, params, data->user_data);
+	} catch (const Exception &ex) {
+		PK_ZYPP_LOG("C++ exception in zypp backend job: %s",
+				ex.asUserString().c_str());
+		pk_backend_job_error_code (job, PK_ERROR_ENUM_INTERNAL_ERROR,
+				ex.asUserString().c_str());
+	}
+
+	delete data;
+}
+
+/**
+ * Wrapper function that takes care of catching C++ exceptions for us if
+ * they are not caught somewhere more specific in the call stack. A C++
+ * exception thrown over the PackageKit backend API would lead to an
+ * unconditional abort, possibly corrupting the rpmdb, so we catch it here
+ * and make sure we propagate the exception message to the job as error,
+ * log the error and avoid general crash'n'burn behavior.
+ **/
+static gboolean
+zypp_backend_job_thread_create (PkBackendJob *job, PkBackendJobThreadFunc func,
+		gpointer user_data, GDestroyNotify destroy_func)
+{
+	ZyppBackendThreadWrapperData *data = new ZyppBackendThreadWrapperData(func,
+			user_data, destroy_func);
+	return pk_backend_job_thread_create (job, zypp_backend_job_thread_wrapper,
+			data, destroy_func);
+}
+
 static int64_t
 get_free_disk_space(const char *path)
 {
@@ -2112,7 +2168,7 @@ backend_get_requires_thread (PkBackendJob *job, GVariant *params, gpointer user_
 void
 pk_backend_get_requires(PkBackend *backend, PkBackendJob *job, PkBitfield filters, gchar **package_ids, gboolean recursive)
 {
-	pk_backend_job_thread_create (job, backend_get_requires_thread, NULL, NULL);
+	zypp_backend_job_thread_create (job, backend_get_requires_thread, NULL, NULL);
 }
 
 /**
@@ -2305,7 +2361,7 @@ backend_get_depends_thread (PkBackendJob *job, GVariant *params, gpointer user_d
 void
 pk_backend_get_depends (PkBackend *backend, PkBackendJob *job, PkBitfield filters, gchar **package_ids, gboolean recursive)
 {
-	pk_backend_job_thread_create (job, backend_get_depends_thread, NULL, NULL);
+	zypp_backend_job_thread_create (job, backend_get_depends_thread, NULL, NULL);
 }
 
 static void
@@ -2377,7 +2433,7 @@ backend_get_details_thread (PkBackendJob *job, GVariant *params, gpointer user_d
 void
 pk_backend_get_details (PkBackend *backend, PkBackendJob *job, gchar **package_ids)
 {
-	pk_backend_job_thread_create (job, backend_get_details_thread, NULL, NULL);
+	zypp_backend_job_thread_create (job, backend_get_details_thread, NULL, NULL);
 }
 
 static void
@@ -2434,7 +2490,7 @@ backend_get_distro_upgrades_thread(PkBackendJob *job, GVariant *params, gpointer
 void
 pk_backend_get_distro_upgrades (PkBackend *backend, PkBackendJob *job)
 {
-	pk_backend_job_thread_create (job, backend_get_distro_upgrades_thread, NULL, NULL);
+	zypp_backend_job_thread_create (job, backend_get_distro_upgrades_thread, NULL, NULL);
 }
 
 static void
@@ -2458,7 +2514,7 @@ backend_refresh_cache_thread (PkBackendJob *job, GVariant *params, gpointer user
 void
 pk_backend_refresh_cache (PkBackend *backend, PkBackendJob *job, gboolean force)
 {
-	pk_backend_job_thread_create (job, backend_refresh_cache_thread, NULL, NULL);
+	zypp_backend_job_thread_create (job, backend_refresh_cache_thread, NULL, NULL);
 }
 
 /* If a critical self update (see qualifying steps below) is available then only show/install that update first.
@@ -2566,7 +2622,7 @@ backend_get_updates_thread (PkBackendJob *job, GVariant *params, gpointer user_d
 void
 pk_backend_get_updates (PkBackend *backend, PkBackendJob *job, PkBitfield filters)
 {
-	pk_backend_job_thread_create (job, backend_get_updates_thread, NULL, NULL);
+	zypp_backend_job_thread_create (job, backend_get_updates_thread, NULL, NULL);
 }
 
 static void
@@ -2696,7 +2752,7 @@ backend_install_files_thread (PkBackendJob *job, GVariant *params, gpointer user
 void
 pk_backend_install_files (PkBackend *backend, PkBackendJob *job, PkBitfield transaction_flags, gchar **full_paths)
 {
-	pk_backend_job_thread_create (job, backend_install_files_thread, NULL, NULL);
+	zypp_backend_job_thread_create (job, backend_install_files_thread, NULL, NULL);
 }
 
 static void
@@ -2792,7 +2848,7 @@ backend_get_update_detail_thread (PkBackendJob *job, GVariant *params, gpointer
 void
 pk_backend_get_update_detail (PkBackend *backend, PkBackendJob *job, gchar **package_ids)
 {
-	pk_backend_job_thread_create (job, backend_get_update_detail_thread, NULL, NULL);
+	zypp_backend_job_thread_create (job, backend_get_update_detail_thread, NULL, NULL);
 }
 
 static void
@@ -2884,7 +2940,7 @@ pk_backend_install_packages (PkBackend *backend, PkBackendJob *job, PkBitfield t
 {
 	// For now, don't let the user cancel the install once it's started
 	pk_backend_job_set_allow_cancel (job, FALSE);
-	pk_backend_job_thread_create (job, backend_install_packages_thread, NULL, NULL);
+	zypp_backend_job_thread_create (job, backend_install_packages_thread, NULL, NULL);
 }
 
 
@@ -2910,7 +2966,7 @@ backend_install_signature_thread (PkBackendJob *job, GVariant *params, gpointer
 void
 pk_backend_install_signature (PkBackend *backend, PkBackendJob *job, PkSigTypeEnum type, const gchar *key_id, const gchar *package_id)
 {
-	pk_backend_job_thread_create (job, backend_install_signature_thread, NULL, NULL);
+	zypp_backend_job_thread_create (job, backend_install_signature_thread, NULL, NULL);
 }
 
 static void
@@ -3003,7 +3059,7 @@ void
 pk_backend_remove_packages (PkBackend *backend, PkBackendJob *job, PkBitfield transaction_flags,
 			    gchar **package_ids, gboolean allow_deps, gboolean autoremove)
 {
-	pk_backend_job_thread_create (job, backend_remove_packages_thread, NULL, NULL);
+	zypp_backend_job_thread_create (job, backend_remove_packages_thread, NULL, NULL);
 }
 
 static void
@@ -3097,7 +3153,7 @@ backend_resolve_thread (PkBackendJob *job, GVariant *params, gpointer user_data)
 void
 pk_backend_resolve (PkBackend *backend, PkBackendJob *job, PkBitfield filters, gchar **package_ids)
 {
-	pk_backend_job_thread_create (job, backend_resolve_thread, NULL, NULL);
+	zypp_backend_job_thread_create (job, backend_resolve_thread, NULL, NULL);
 }
 
 static void
@@ -3193,7 +3249,7 @@ backend_find_packages_thread (PkBackendJob *job, GVariant *params, gpointer user
 void
 pk_backend_search_names (PkBackend *backend, PkBackendJob *job, PkBitfield filters, gchar **values)
 {
-	pk_backend_job_thread_create (job, backend_find_packages_thread, NULL, NULL);
+	zypp_backend_job_thread_create (job, backend_find_packages_thread, NULL, NULL);
 }
 
 /**
@@ -3202,7 +3258,7 @@ pk_backend_search_names (PkBackend *backend, PkBackendJob *job, PkBitfield filte
 void
 pk_backend_search_details (PkBackend *backend, PkBackendJob *job, PkBitfield filters, gchar **values)
 {
-	pk_backend_job_thread_create (job, backend_find_packages_thread, NULL, NULL);
+	zypp_backend_job_thread_create (job, backend_find_packages_thread, NULL, NULL);
 }
 
 static void
@@ -3265,7 +3321,7 @@ backend_search_group_thread (PkBackendJob *job, GVariant *params, gpointer user_
 void
 pk_backend_search_groups (PkBackend *backend, PkBackendJob *job, PkBitfield filters, gchar **values)
 {
-	pk_backend_job_thread_create (job, backend_search_group_thread, NULL, NULL);
+	zypp_backend_job_thread_create (job, backend_search_group_thread, NULL, NULL);
 }
 
 /**
@@ -3274,7 +3330,7 @@ pk_backend_search_groups (PkBackend *backend, PkBackendJob *job, PkBitfield filt
 void
 pk_backend_search_files (PkBackend *backend, PkBackendJob *job, PkBitfield filters, gchar **values)
 {
-	pk_backend_job_thread_create (job, backend_find_packages_thread, NULL, NULL);
+	zypp_backend_job_thread_create (job, backend_find_packages_thread, NULL, NULL);
 }
 
 /**
@@ -3432,7 +3488,7 @@ backend_get_files_thread (PkBackendJob *job, GVariant *params, gpointer user_dat
 void
 pk_backend_get_files(PkBackend *backend, PkBackendJob *job, gchar **package_ids)
 {
-	pk_backend_job_thread_create (job, backend_get_files_thread, NULL, NULL);
+	zypp_backend_job_thread_create (job, backend_get_files_thread, NULL, NULL);
 }
 
 static void
@@ -3475,7 +3531,7 @@ backend_get_packages_thread (PkBackendJob *job, GVariant *params, gpointer user_
 void
 pk_backend_get_packages (PkBackend *backend, PkBackendJob *job, PkBitfield filter)
 {
-	pk_backend_job_thread_create (job, backend_get_packages_thread, NULL, NULL);
+	zypp_backend_job_thread_create (job, backend_get_packages_thread, NULL, NULL);
 }
 
 static void
@@ -3539,7 +3595,7 @@ backend_update_packages_thread (PkBackendJob *job, GVariant *params, gpointer us
 void
 pk_backend_update_packages (PkBackend *backend, PkBackendJob *job, PkBitfield transaction_flags, gchar **package_ids)
 {
-	pk_backend_job_thread_create (job, backend_update_packages_thread, NULL, NULL);
+	zypp_backend_job_thread_create (job, backend_update_packages_thread, NULL, NULL);
 }
 
 static void
@@ -3679,7 +3735,7 @@ backend_repo_set_data_thread (PkBackendJob *job, GVariant *params, gpointer user
 void
 pk_backend_repo_set_data (PkBackend *backend, PkBackendJob *job, const gchar *repo_id, const gchar *parameter, const gchar *value)
 {
-	pk_backend_job_thread_create (job, backend_repo_set_data_thread, NULL, NULL);
+	zypp_backend_job_thread_create (job, backend_repo_set_data_thread, NULL, NULL);
 }
 
 /**
@@ -3837,7 +3893,7 @@ backend_what_provides_thread (PkBackendJob *job, GVariant *params, gpointer user
 void
 pk_backend_what_provides (PkBackend *backend, PkBackendJob *job, PkBitfield filters, PkProvidesEnum provide, gchar **values)
 {
-	pk_backend_job_thread_create (job, backend_what_provides_thread, NULL, NULL);
+	zypp_backend_job_thread_create (job, backend_what_provides_thread, NULL, NULL);
 }
 
 gchar **
@@ -3933,7 +3989,7 @@ backend_download_packages_thread (PkBackendJob *job, GVariant *params, gpointer
 void
 pk_backend_download_packages (PkBackend *backend, PkBackendJob *job, gchar **package_ids, const gchar *directory)
 {
-	pk_backend_job_thread_create (job, backend_download_packages_thread, NULL, NULL);
+	zypp_backend_job_thread_create (job, backend_download_packages_thread, NULL, NULL);
 }
 
 /**
@@ -4050,7 +4106,7 @@ void
 pk_backend_upgrade_system (PkBackend *backend, PkBackendJob *job,
 	const gchar *distro_id, PkUpgradeKindEnum upgrade_kind)
 {
-	pk_backend_job_thread_create (job, backend_upgrade_system_thread,
+	zypp_backend_job_thread_create (job, backend_upgrade_system_thread,
 			new DistUpgrade(distro_id, upgrade_kind), NULL);
 }
 
-- 
2.13.6

