From 9b9911a5ecd77d43bd0cca426857db905ed06bdd Mon, 10 Oct 2016 16:10:10 +0200
From: Thomas Perl <thomas.perl@jolla.com>
Date: Tue, 6 May 2014 11:25:33 +0200
Subject: [PATCH] [zypp] Allow cancelling of downloads


diff --git a/backends/zypp/pk-backend-zypp.cpp b/backends/zypp/pk-backend-zypp.cpp
index fc1de52..a4e7e9c 100644
--- a/backends/zypp/pk-backend-zypp.cpp
+++ b/backends/zypp/pk-backend-zypp.cpp
@@ -122,12 +122,26 @@
 	INSTALLING_AND_REMOVING_PACKAGES,
 };
 
+class PkZyppCancelledException : public std::runtime_error {
+public:
+	PkZyppCancelledException(const char *message)
+		: std::runtime_error(message)
+	{
+	}
+};
+
 
 class ZyppJob {
  public:
 	ZyppJob(PkBackendJob *job);
 	~ZyppJob();
 	zypp::ZYpp::Ptr get_zypp();
+
+	void cancel();
+	bool isCancelled();
+ private:
+	PkBackendJob *job;
+	GCancellable *cancellable;
 };
 
 enum PkgSearchType {
@@ -302,6 +316,8 @@
 {
 class PkBackendZYppPrivate;
 static PkBackendZYppPrivate *priv = 0;
+
+bool currentJobIsCancelled();
 
 /* Overall progress update helpers */
 void zypp_backend_download_finished(PkBackendJob *job);
@@ -504,6 +520,11 @@
 
 	virtual bool progress (int value, zypp::Resolvable::constPtr resolvable)
 	{
+		if (currentJobIsCancelled()) {
+			throw PkZyppCancelledException("Download was cancelled");
+			return false; // Not reached
+		}
+
 		//MIL << resolvable << " " << value << " " << _package_id << std::endl;
 		update_sub_percentage (value);
 		//pk_backend_job_set_speed (_job, static_cast<guint>(dbps_current));
@@ -790,6 +811,17 @@
 	ExecCounters exec;
 };
 
+bool currentJobIsCancelled()
+{
+	if (priv->currentJob) {
+		gpointer user_data = pk_backend_job_get_user_data (priv->currentJob);
+		ZyppJob *zjob = static_cast<ZyppJob *> (user_data);
+		return zjob && zjob->isCancelled();
+	}
+
+	return false;
+}
+
 void zypp_backend_download_finished(PkBackendJob *job)
 {
 	priv->exec.setPhase(DOWNLOADING_PACKAGES);
@@ -816,6 +848,8 @@
 using namespace ZyppBackend;
 
 ZyppJob::ZyppJob(PkBackendJob *job)
+	: job(job)
+	, cancellable(g_cancellable_new())
 {
 	//MIL << "locking zypp" << std::endl;
 	pthread_mutex_lock(&priv->zypp_mutex);
@@ -824,15 +858,20 @@
 		//MIL << "currentjob is already defined - highly impossible" << endl;
 	}
 	
+	pk_backend_job_set_user_data (job, this);
 	pk_backend_job_set_locked(job, true);
+
 	priv->currentJob = job;
 	priv->eventDirector.setJob(job);
 }
 
 ZyppJob::~ZyppJob()
 {
-	if (priv->currentJob)
-		pk_backend_job_set_locked(priv->currentJob, false);
+	pk_backend_job_set_locked (job, false);
+	pk_backend_job_set_user_data (job, 0);
+
+	g_object_unref (cancellable);
+
 	priv->currentJob = 0;
 	priv->eventDirector.setJob(0);
 	//MIL << "unlocking zypp" << std::endl;
@@ -903,6 +942,18 @@
 	return zypp;
 }
 
+void
+ZyppJob::cancel()
+{
+	/* try to cancel the transaction */
+	g_cancellable_cancel (cancellable);
+}
+
+bool
+ZyppJob::isCancelled()
+{
+	return g_cancellable_is_cancelled (cancellable);
+}
 
 gboolean
 zypp_is_changeable_media (const Url &url)
@@ -2950,6 +3001,22 @@
 	zypp_backend_job_thread_create (job, backend_install_packages_thread, NULL, NULL);
 }
 
+/**
+ * pk_backend_cancel:
+ **/
+void
+pk_backend_cancel (PkBackend *backend, PkBackendJob *job)
+{
+	ZyppJob *zjob = static_cast<ZyppJob *>(pk_backend_job_get_user_data (job));
+
+	if (zjob) {
+		PK_ZYPP_LOG ("Cancelling job");
+		zjob->cancel();
+	} else {
+		PK_ZYPP_LOG ("No ZyppJob to cancel");
+	}
+}
+
 
 static void
 backend_install_signature_thread (PkBackendJob *job, GVariant *params, gpointer user_data)
@@ -4099,6 +4166,12 @@
 		if (!zypp_perform_execution (job, zypp, UPGRADE, TRUE, transaction_flags)) {
 			//MIL << "Upgrade execution failed" << std::endl;
 		}
+	} catch (const PkZyppCancelledException &ex) {
+		PK_ZYPP_LOG ("Transaction was cancelled: %s", ex.what());
+		pk_backend_job_error_code (job,
+				PK_ERROR_ENUM_TRANSACTION_CANCELLED,
+				ex.what());
+		pk_backend_job_finished (job);
 	} catch (const Exception &ex) {
 		zypp_backend_finished_error (job,
 				PK_ERROR_ENUM_PACKAGE_DOWNLOAD_FAILED,
