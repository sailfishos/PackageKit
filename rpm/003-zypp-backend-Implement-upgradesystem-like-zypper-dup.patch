From 9b068d4aba4443f7918c17a2023f283498160a3c Mon, 10 Oct 2016 15:49:10 +0200
From: Thomas Perl <thomas.perl@jollamobile.com>
Date: Mon, 12 Aug 2013 17:07:17 +0200
Subject: [PATCH] zypp backend: Implement upgrade-system (like 'zypper dup')


Example usage:

    pkcon upgrade-system sailfish default

The distro-id ("sailfish") and the method ("default") are ignored,
but have to be passed for PackageKit to allow an upgrade.

[backends] Implement support for upgrade-system in zypp backend

diff --git a/backends/zypp/pk-backend-zypp.cpp b/backends/zypp/pk-backend-zypp.cpp
index 437e657..275469c 100644
--- a/backends/zypp/pk-backend-zypp.cpp
+++ b/backends/zypp/pk-backend-zypp.cpp
@@ -3656,6 +3656,112 @@
 }
 
 /**
+ * struct DistUpgrade: Contains parameters for the upgrade-system command
+ **/
+struct DistUpgrade {
+	DistUpgrade(const gchar *distro_id, PkUpgradeKindEnum upgrade_kind)
+		: distro_id(g_strdup(distro_id))
+		, upgrade_kind(upgrade_kind)
+	{
+	}
+
+	~DistUpgrade()
+	{
+		g_free(distro_id);
+	}
+
+	gchar *distro_id;
+	PkUpgradeKindEnum upgrade_kind;
+};
+
+static void
+backend_upgrade_system_thread (PkBackendJob *job, GVariant *params, gpointer user_data)
+{
+	DistUpgrade *parameters = static_cast<DistUpgrade *>(user_data);
+	/**
+	 * Parameters passed to upgrade-system. Unused right now, but
+	 * could be used in the future (distro_id and upgrade_kind).
+	 *
+	 * Possible values for upgrade_kind:
+	 *
+	 *  - PK_UPGRADE_KIND_ENUM_MINIMAL
+	 *  - PK_UPGRADE_KIND_ENUM_DEFAULT
+	 *  - PK_UPGRADE_KIND_ENUM_COMPLETE
+	 *
+	 * (all other values should be considered invalid)
+	 **/
+	delete parameters;
+
+	PkBitfield transaction_flags;
+	g_variant_get (params, "(t)",
+			&transaction_flags);
+
+	ZyppJob zjob(job);
+	ZYpp::Ptr zypp = zjob.get_zypp();
+
+	if (zypp == NULL) {
+		pk_backend_job_finished (job);
+		return;
+	}
+
+	try
+	{
+		// Modeled after dist_upgrade() in Zypper's src/solve-commit.cc
+		zypp->resolver()->setForceResolve(true);
+		zypp->resolver()->setOnlyRequires(false);
+		zypp->resolver()->setIgnoreAlreadyRecommended(true);
+
+		pk_backend_job_set_status (job, PK_STATUS_ENUM_REFRESH_CACHE);
+		if (!zypp_refresh_cache (job, zypp, FALSE)) {
+			zypp_backend_finished_error (job,
+					PK_ERROR_ENUM_REPO_NOT_AVAILABLE,
+					"Cannot refresh package cache.");
+			return;
+		}
+
+		// Must be called after zypp_refresh_cache to see locally-installed files
+		ResPool pool = zypp_build_pool (zypp, TRUE);
+
+		pk_backend_job_set_status (job, PK_STATUS_ENUM_DEP_RESOLVE);
+		if (!zypp->resolver()->doUpgrade()) {
+			zypp_backend_finished_error (job,
+					PK_ERROR_ENUM_INTERNAL_ERROR,
+					"Cannot calculate dist-upgrade.");
+			return;
+		}
+
+		ZYppCommitPolicy policy;
+		policy.restrictToMedia (0); // 0 == install all packages regardless to media
+		policy.downloadMode (DownloadInHeaps);
+		policy.syncPoolAfterCommit (true);
+
+		ZYppCommitResult result = zypp->commit (policy);
+
+		if (!result.allDone()) {
+			zypp_backend_finished_error (job,
+					PK_ERROR_ENUM_LOCAL_INSTALL_FAILED,
+					"Could not perform dist-upgrade.");
+			return;
+		}
+	} catch (const Exception &ex) {
+		zypp_backend_finished_error (job,
+				PK_ERROR_ENUM_PACKAGE_DOWNLOAD_FAILED,
+				ex.asUserString().c_str());
+		return;
+	}
+
+	pk_backend_job_finished (job);
+}
+
+void
+pk_backend_upgrade_system (PkBackend *backend, PkBackendJob *job,
+	const gchar *distro_id, PkUpgradeKindEnum upgrade_kind)
+{
+	pk_backend_job_thread_create (job, backend_upgrade_system_thread,
+			new DistUpgrade(distro_id, upgrade_kind), NULL);
+}
+
+/**
  * pk_backend_start_job:
  */
 void
