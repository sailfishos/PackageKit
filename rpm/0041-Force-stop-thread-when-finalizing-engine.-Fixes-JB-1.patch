From 5f22acabb3f7d6a5ae701a26595f57b3be0352e2 Mon Sep 17 00:00:00 2001
From: Thomas Perl <thomas.perl@jolla.com>
Date: Thu, 13 Mar 2014 11:49:11 +0100
Subject: [PATCH 41/65] Force-stop thread when finalizing engine. Fixes
 JB#17088

---
 src/pk-engine.c | 59 ++++++++++++++++++++++++++++++++++++---------------------
 1 file changed, 37 insertions(+), 22 deletions(-)

diff --git a/src/pk-engine.c b/src/pk-engine.c
index 68fed0808..d3d1a410c 100644
--- a/src/pk-engine.c
+++ b/src/pk-engine.c
@@ -336,6 +336,39 @@ mce_keepalive_thread_func (gpointer data)
 
 	return NULL;
 }
+
+static void
+mce_thread_start (PkEngine *engine)
+{
+	g_mutex_lock (&(engine->priv->mce_mutex));
+	if (!engine->priv->mce_thread_active) {
+		g_debug ("Starting up the mce keepalive thread");
+		engine->priv->mce_thread_active = TRUE;
+		engine->priv->mce_thread = g_thread_new("mce-keepalive-sender",
+				mce_keepalive_thread_func, engine);
+		g_debug ("The mce keepalive thread was started");
+	}
+	g_mutex_unlock (&(engine->priv->mce_mutex));
+}
+
+static void
+mce_thread_stop (PkEngine *engine)
+{
+	g_mutex_lock (&(engine->priv->mce_mutex));
+	if (engine->priv->mce_thread_active) {
+		g_debug ("Shutting down the mce keepalive thread");
+		engine->priv->mce_thread_active = FALSE;
+		g_cond_signal (&(engine->priv->mce_cond));
+		GThread *shutdown_thread = engine->priv->mce_thread;
+		engine->priv->mce_thread = NULL;
+		g_mutex_unlock (&(engine->priv->mce_mutex));
+		g_thread_join (shutdown_thread);
+		g_debug ("The mce keepalive thread was shut down");
+	} else {
+		// Thread is not active - just unlock the mutex
+		g_mutex_unlock (&(engine->priv->mce_mutex));
+	}
+}
 #endif
 
 /**
@@ -614,30 +647,10 @@ pk_engine_get_seconds_idle (PkEngine *engine)
 #ifdef PK_BUILD_MCE
 	if (size != 0) {
 		/* start the mce keepalive thread */
-		g_mutex_lock (&(engine->priv->mce_mutex));
-		if (!engine->priv->mce_thread_active) {
-			g_debug ("Starting up the mce keepalive thread");
-			engine->priv->mce_thread_active = TRUE;
-			engine->priv->mce_thread = g_thread_new("mce-keepalive-sender",
-					mce_keepalive_thread_func, engine);
-			g_debug ("The mce keepalive thread was started");
-		}
-		g_mutex_unlock (&(engine->priv->mce_mutex));
+		mce_thread_start (engine);
 	} else {
 		/* shut down the mce keepalive thread */
-		g_mutex_lock (&(engine->priv->mce_mutex));
-		if (engine->priv->mce_thread_active) {
-			g_debug ("Shutting down the mce keepalive thread");
-			engine->priv->mce_thread_active = FALSE;
-			g_cond_signal (&(engine->priv->mce_cond));
-			g_mutex_unlock (&(engine->priv->mce_mutex));
-			g_thread_join (engine->priv->mce_thread);
-			engine->priv->mce_thread = NULL;
-			g_debug ("The mce keepalive thread was shut down");
-		} else {
-			// Thread is not active - just unlock the mutex
-			g_mutex_unlock (&(engine->priv->mce_mutex));
-		}
+		mce_thread_stop (engine);
 	}
 #endif
 
@@ -1913,6 +1926,8 @@ pk_engine_finalize (GObject *object)
 #endif
 
 #ifdef PK_BUILD_MCE
+	/* Before clearing the mutex and cond, force-stop the thread */
+	mce_thread_stop (engine);
 	g_mutex_clear(&(engine->priv->mce_mutex));
 	g_cond_clear(&(engine->priv->mce_cond));
 #endif
-- 
2.13.5

